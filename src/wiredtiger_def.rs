/* automatically generated by rust-bindgen */

extern crate libc;

#[link(name = "wiredtiger")]
extern{
}

pub type __int8_t = libc::c_char;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_longlong;
pub type __uint64_t = libc::c_ulonglong;
pub type __darwin_intptr_t = libc::c_long;
pub type __darwin_natural_t = libc::c_uint;
pub type __darwin_ct_rune_t = libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [libc::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = libc::c_long;
pub type __darwin_size_t = libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = libc::c_int;
pub type __darwin_clock_t = libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = libc::c_long;
pub type __darwin_time_t = libc::c_long;
pub type int8_t = libc::c_char;
pub type int16_t = libc::c_short;
pub type int32_t = libc::c_int;
pub type int64_t = libc::c_longlong;
pub type u_int8_t = libc::c_uchar;
pub type u_int16_t = libc::c_ushort;
pub type u_int32_t = libc::c_uint;
pub type u_int64_t = libc::c_ulonglong;
pub type register_t = int64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = libc::c_ulong;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = libc::c_uint;
pub type __darwin_fsfilcnt_t = libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut libc::c_void)
                                             -> ()>,
    pub __arg: *mut libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [libc::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type u_char = libc::c_uchar;
pub type u_short = libc::c_ushort;
pub type u_int = libc::c_uint;
pub type u_long = libc::c_ulong;
pub type ushort = libc::c_ushort;
pub type _uint = libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut libc::c_char;
pub type daddr_t = int32_t;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = __darwin_size_t;
pub type ssize_t = __darwin_ssize_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::clone::Clone for Struct_fd_set {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type __darwin_nl_item = libc::c_int;
pub type __darwin_wctrans_t = libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type wchar_t = __darwin_wchar_t;
pub type uint8_t = libc::c_uchar;
pub type uint16_t = libc::c_ushort;
pub type uint32_t = libc::c_uint;
pub type uint64_t = libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intmax_t = libc::c_long;
pub type uintmax_t = libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed2;
pub type va_list = __darwin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut libc::c_uchar,
    pub _size: libc::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut libc::c_uchar,
    pub _r: libc::c_int,
    pub _w: libc::c_int,
    pub _flags: libc::c_short,
    pub _file: libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: libc::c_int,
    pub _cookie: *mut libc::c_void,
    pub _close: ::std::option::Option<extern "C" fn(arg1: *mut libc::c_void)
                                          -> libc::c_int>,
    pub _read: ::std::option::Option<extern "C" fn(arg1: *mut libc::c_void,
                                                   arg2: *mut libc::c_char,
                                                   arg3: libc::c_int)
                                         -> libc::c_int>,
    pub _seek: ::std::option::Option<extern "C" fn(arg1: *mut libc::c_void,
                                                   arg2: fpos_t,
                                                   arg3: libc::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<extern "C" fn(arg1: *mut libc::c_void,
                                                    arg2:
                                                        *const libc::c_char,
                                                    arg3: libc::c_int)
                                          -> libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: libc::c_int,
    pub _ubuf: [libc::c_uchar; 3usize],
    pub _nbuf: [libc::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: libc::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct___sFILE;
pub type wt_off_t = off_t;
pub type WT_ASYNC_CALLBACK = Struct___wt_async_callback;
pub type WT_ASYNC_OP = Struct___wt_async_op;
pub type WT_COLLATOR = Struct___wt_collator;
pub type WT_COMPRESSOR = Struct___wt_compressor;
pub type WT_CONFIG_ITEM = Struct___wt_config_item;
pub type WT_CONFIG_PARSER = Struct___wt_config_parser;
pub type WT_CONNECTION = Struct___wt_connection;
pub type WT_CURSOR = Struct___wt_cursor;
pub type WT_DATA_SOURCE = Struct___wt_data_source;
pub type WT_EVENT_HANDLER = Struct___wt_event_handler;
pub enum Struct___wt_extension_api { }
pub type WT_EXTENSION_API = Struct___wt_extension_api;
pub type WT_EXTRACTOR = Struct___wt_extractor;
pub type WT_ITEM = Struct___wt_item;
pub type WT_LSN = Struct___wt_lsn;
pub type WT_SESSION = Struct___wt_session;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_item {
    pub data: *const libc::c_void,
    pub size: size_t,
    pub flags: uint32_t,
    pub mem: *mut libc::c_void,
    pub memsize: size_t,
}
impl ::std::clone::Clone for Struct___wt_item {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_item {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_lsn {
    pub file: uint32_t,
    pub offset: wt_off_t,
}
impl ::std::clone::Clone for Struct___wt_lsn {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_lsn {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_cursor {
    pub session: *mut WT_SESSION,
    pub uri: *const libc::c_char,
    pub key_format: *const libc::c_char,
    pub value_format: *const libc::c_char,
    pub get_key: ::std::option::Option<extern "C" fn(cursor:
                                                         *mut WT_CURSOR, ...)
                                           -> libc::c_int>,
    pub get_value: ::std::option::Option<extern "C" fn(cursor:
                                                           *mut WT_CURSOR, ...)
                                             -> libc::c_int>,
    pub set_key: ::std::option::Option<extern "C" fn(cursor:
                                                         *mut WT_CURSOR, ...)
                                           -> ()>,
    pub set_value: ::std::option::Option<extern "C" fn(cursor:
                                                           *mut WT_CURSOR, ...)
                                             -> ()>,
    pub compare: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR,
                                                     other: *mut WT_CURSOR,
                                                     comparep:
                                                         *mut libc::c_int)
                                           -> libc::c_int>,
    pub equals: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR,
                                                    other: *mut WT_CURSOR,
                                                    equalp:
                                                        *mut libc::c_int)
                                          -> libc::c_int>,
    pub next: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                        -> libc::c_int>,
    pub prev: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                        -> libc::c_int>,
    pub reset: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                         -> libc::c_int>,
    pub search: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                          -> libc::c_int>,
    pub search_near: ::std::option::Option<extern "C" fn(cursor:
                                                             *mut WT_CURSOR,
                                                         exactp:
                                                             *mut libc::c_int)
                                               -> libc::c_int>,
    pub insert: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                          -> libc::c_int>,
    pub update: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                          -> libc::c_int>,
    pub remove: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                          -> libc::c_int>,
    pub close: ::std::option::Option<extern "C" fn(cursor: *mut WT_CURSOR)
                                         -> libc::c_int>,
    pub reconfigure: ::std::option::Option<extern "C" fn(cursor:
                                                             *mut WT_CURSOR,
                                                         config:
                                                             *const libc::c_char)
                                               -> libc::c_int>,
    pub q: Struct_Unnamed3,
    pub recno: uint64_t,
    pub raw_recno_buf: [uint8_t; 9usize],
    pub json_private: *mut libc::c_void,
    pub lang_private: *mut libc::c_void,
    pub key: WT_ITEM,
    pub value: WT_ITEM,
    pub saved_err: libc::c_int,
    pub internal_uri: *const libc::c_char,
    pub flags: uint32_t,
}
impl ::std::clone::Clone for Struct___wt_cursor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_cursor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub tqe_next: *mut WT_CURSOR,
    pub tqe_prev: *mut *mut WT_CURSOR,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed4 = libc::c_uint;
pub const WT_AOP_NONE: libc::c_uint = 0;
pub const WT_AOP_COMPACT: libc::c_uint = 1;
pub const WT_AOP_INSERT: libc::c_uint = 2;
pub const WT_AOP_REMOVE: libc::c_uint = 3;
pub const WT_AOP_SEARCH: libc::c_uint = 4;
pub const WT_AOP_UPDATE: libc::c_uint = 5;
pub type WT_ASYNC_OPTYPE = Enum_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_async_op {
    pub connection: *mut WT_CONNECTION,
    pub key_format: *const libc::c_char,
    pub value_format: *const libc::c_char,
    pub app_private: *mut libc::c_void,
    pub get_key: ::std::option::Option<extern "C" fn(op:
                                                         *mut WT_ASYNC_OP, ...)
                                           -> libc::c_int>,
    pub get_value: ::std::option::Option<extern "C" fn(op:
                                                           *mut WT_ASYNC_OP, ...)
                                             -> libc::c_int>,
    pub set_key: ::std::option::Option<extern "C" fn(op:
                                                         *mut WT_ASYNC_OP, ...)
                                           -> ()>,
    pub set_value: ::std::option::Option<extern "C" fn(op:
                                                           *mut WT_ASYNC_OP, ...)
                                             -> ()>,
    pub search: ::std::option::Option<extern "C" fn(op: *mut WT_ASYNC_OP)
                                          -> libc::c_int>,
    pub insert: ::std::option::Option<extern "C" fn(op: *mut WT_ASYNC_OP)
                                          -> libc::c_int>,
    pub update: ::std::option::Option<extern "C" fn(op: *mut WT_ASYNC_OP)
                                          -> libc::c_int>,
    pub remove: ::std::option::Option<extern "C" fn(op: *mut WT_ASYNC_OP)
                                          -> libc::c_int>,
    pub compact: ::std::option::Option<extern "C" fn(op: *mut WT_ASYNC_OP)
                                           -> libc::c_int>,
    pub get_id: ::std::option::Option<extern "C" fn(op: *mut WT_ASYNC_OP)
                                          -> uint64_t>,
    pub get_type: ::std::option::Option<extern "C" fn(op: *mut WT_ASYNC_OP)
                                            -> WT_ASYNC_OPTYPE>,
    pub c: WT_CURSOR,
}
impl ::std::clone::Clone for Struct___wt_async_op {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_async_op {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_session {
    pub connection: *mut WT_CONNECTION,
    pub app_private: *mut libc::c_void,
    pub close: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                   config:
                                                       *const libc::c_char)
                                         -> libc::c_int>,
    pub reconfigure: ::std::option::Option<extern "C" fn(session:
                                                             *mut WT_SESSION,
                                                         config:
                                                             *const libc::c_char)
                                               -> libc::c_int>,
    pub strerror: ::std::option::Option<extern "C" fn(session:
                                                          *mut WT_SESSION,
                                                      error: libc::c_int)
                                            -> *const libc::c_char>,
    pub open_cursor: ::std::option::Option<extern "C" fn(session:
                                                             *mut WT_SESSION,
                                                         uri:
                                                             *const libc::c_char,
                                                         to_dup:
                                                             *mut WT_CURSOR,
                                                         config:
                                                             *const libc::c_char,
                                                         cursorp:
                                                             *mut *mut WT_CURSOR)
                                               -> libc::c_int>,
    pub create: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                    name:
                                                        *const libc::c_char,
                                                    config:
                                                        *const libc::c_char)
                                          -> libc::c_int>,
    pub compact: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                     name:
                                                         *const libc::c_char,
                                                     config:
                                                         *const libc::c_char)
                                           -> libc::c_int>,
    pub drop: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                  name: *const libc::c_char,
                                                  config:
                                                      *const libc::c_char)
                                        -> libc::c_int>,
    pub log_printf: ::std::option::Option<extern "C" fn(session:
                                                            *mut WT_SESSION,
                                                        fmt:
                                                            *const libc::c_char, ...)
                                              -> libc::c_int>,
    pub rename: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                    uri:
                                                        *const libc::c_char,
                                                    newuri:
                                                        *const libc::c_char,
                                                    config:
                                                        *const libc::c_char)
                                          -> libc::c_int>,
    pub salvage: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                     name:
                                                         *const libc::c_char,
                                                     config:
                                                         *const libc::c_char)
                                           -> libc::c_int>,
    pub truncate: ::std::option::Option<extern "C" fn(session:
                                                          *mut WT_SESSION,
                                                      name:
                                                          *const libc::c_char,
                                                      start: *mut WT_CURSOR,
                                                      stop: *mut WT_CURSOR,
                                                      config:
                                                          *const libc::c_char)
                                            -> libc::c_int>,
    pub upgrade: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                     name:
                                                         *const libc::c_char,
                                                     config:
                                                         *const libc::c_char)
                                           -> libc::c_int>,
    pub verify: ::std::option::Option<extern "C" fn(session: *mut WT_SESSION,
                                                    name:
                                                        *const libc::c_char,
                                                    config:
                                                        *const libc::c_char)
                                          -> libc::c_int>,
    pub begin_transaction: ::std::option::Option<extern "C" fn(session:
                                                                   *mut WT_SESSION,
                                                               config:
                                                                   *const libc::c_char)
                                                     -> libc::c_int>,
    pub commit_transaction: ::std::option::Option<extern "C" fn(session:
                                                                    *mut WT_SESSION,
                                                                config:
                                                                    *const libc::c_char)
                                                      -> libc::c_int>,
    pub rollback_transaction: ::std::option::Option<extern "C" fn(session:
                                                                      *mut WT_SESSION,
                                                                  config:
                                                                      *const libc::c_char)
                                                        -> libc::c_int>,
    pub checkpoint: ::std::option::Option<extern "C" fn(session:
                                                            *mut WT_SESSION,
                                                        config:
                                                            *const libc::c_char)
                                              -> libc::c_int>,
    pub transaction_pinned_range: ::std::option::Option<extern "C" fn(session:
                                                                          *mut WT_SESSION,
                                                                      range:
                                                                          *mut uint64_t)
                                                            -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_session {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_session {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_connection {
    pub async_flush: ::std::option::Option<extern "C" fn(connection:
                                                             *mut WT_CONNECTION)
                                               -> libc::c_int>,
    pub async_new_op: ::std::option::Option<extern "C" fn(connection:
                                                              *mut WT_CONNECTION,
                                                          uri:
                                                              *const libc::c_char,
                                                          config:
                                                              *const libc::c_char,
                                                          callback:
                                                              *mut WT_ASYNC_CALLBACK,
                                                          asyncopp:
                                                              *mut *mut WT_ASYNC_OP)
                                                -> libc::c_int>,
    pub close: ::std::option::Option<extern "C" fn(connection:
                                                       *mut WT_CONNECTION,
                                                   config:
                                                       *const libc::c_char)
                                         -> libc::c_int>,
    pub reconfigure: ::std::option::Option<extern "C" fn(connection:
                                                             *mut WT_CONNECTION,
                                                         config:
                                                             *const libc::c_char)
                                               -> libc::c_int>,
    pub get_home: ::std::option::Option<extern "C" fn(connection:
                                                          *mut WT_CONNECTION)
                                            -> *const libc::c_char>,
    pub configure_method: ::std::option::Option<extern "C" fn(connection:
                                                                  *mut WT_CONNECTION,
                                                              method:
                                                                  *const libc::c_char,
                                                              uri:
                                                                  *const libc::c_char,
                                                              config:
                                                                  *const libc::c_char,
                                                              _type:
                                                                  *const libc::c_char,
                                                              check:
                                                                  *const libc::c_char)
                                                    -> libc::c_int>,
    pub is_new: ::std::option::Option<extern "C" fn(connection:
                                                        *mut WT_CONNECTION)
                                          -> libc::c_int>,
    pub open_session: ::std::option::Option<extern "C" fn(connection:
                                                              *mut WT_CONNECTION,
                                                          errhandler:
                                                              *mut WT_EVENT_HANDLER,
                                                          config:
                                                              *const libc::c_char,
                                                          sessionp:
                                                              *mut *mut WT_SESSION)
                                                -> libc::c_int>,
    pub load_extension: ::std::option::Option<extern "C" fn(connection:
                                                                *mut WT_CONNECTION,
                                                            path:
                                                                *const libc::c_char,
                                                            config:
                                                                *const libc::c_char)
                                                  -> libc::c_int>,
    pub add_data_source: ::std::option::Option<extern "C" fn(connection:
                                                                 *mut WT_CONNECTION,
                                                             prefix:
                                                                 *const libc::c_char,
                                                             data_source:
                                                                 *mut WT_DATA_SOURCE,
                                                             config:
                                                                 *const libc::c_char)
                                                   -> libc::c_int>,
    pub add_collator: ::std::option::Option<extern "C" fn(connection:
                                                              *mut WT_CONNECTION,
                                                          name:
                                                              *const libc::c_char,
                                                          collator:
                                                              *mut WT_COLLATOR,
                                                          config:
                                                              *const libc::c_char)
                                                -> libc::c_int>,
    pub add_compressor: ::std::option::Option<extern "C" fn(connection:
                                                                *mut WT_CONNECTION,
                                                            name:
                                                                *const libc::c_char,
                                                            compressor:
                                                                *mut WT_COMPRESSOR,
                                                            config:
                                                                *const libc::c_char)
                                                  -> libc::c_int>,
    pub add_extractor: ::std::option::Option<extern "C" fn(connection:
                                                               *mut WT_CONNECTION,
                                                           name:
                                                               *const libc::c_char,
                                                           extractor:
                                                               *mut WT_EXTRACTOR,
                                                           config:
                                                               *const libc::c_char)
                                                 -> libc::c_int>,
    pub get_extension_api: ::std::option::Option<extern "C" fn(wt_conn:
                                                                   *mut WT_CONNECTION)
                                                     ->
                                                         *mut WT_EXTENSION_API>,
}
impl ::std::clone::Clone for Struct___wt_connection {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_connection {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_async_callback {
    pub notify: ::std::option::Option<extern "C" fn(cb:
                                                        *mut WT_ASYNC_CALLBACK,
                                                    op: *mut WT_ASYNC_OP,
                                                    op_ret: libc::c_int,
                                                    flags: uint32_t)
                                          -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_async_callback {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_async_callback {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_event_handler {
    pub handle_error: ::std::option::Option<extern "C" fn(handler:
                                                              *mut WT_EVENT_HANDLER,
                                                          session:
                                                              *mut WT_SESSION,
                                                          error:
                                                              libc::c_int,
                                                          message:
                                                              *const libc::c_char)
                                                -> libc::c_int>,
    pub handle_message: ::std::option::Option<extern "C" fn(handler:
                                                                *mut WT_EVENT_HANDLER,
                                                            session:
                                                                *mut WT_SESSION,
                                                            message:
                                                                *const libc::c_char)
                                                  -> libc::c_int>,
    pub handle_progress: ::std::option::Option<extern "C" fn(handler:
                                                                 *mut WT_EVENT_HANDLER,
                                                             session:
                                                                 *mut WT_SESSION,
                                                             operation:
                                                                 *const libc::c_char,
                                                             progress:
                                                                 uint64_t)
                                                   -> libc::c_int>,
    pub handle_close: ::std::option::Option<extern "C" fn(handler:
                                                              *mut WT_EVENT_HANDLER,
                                                          session:
                                                              *mut WT_SESSION,
                                                          cursor:
                                                              *mut WT_CURSOR)
                                                -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_event_handler {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_event_handler {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___wt_pack_stream { }
pub type WT_PACK_STREAM = Struct___wt_pack_stream;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_config_item {
    pub _str: *const libc::c_char,
    pub len: size_t,
    pub val: int64_t,
    pub _type: int32_t,
}
impl ::std::clone::Clone for Struct___wt_config_item {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_config_item {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_config_parser {
    pub close: ::std::option::Option<extern "C" fn(config_parser:
                                                       *mut WT_CONFIG_PARSER)
                                         -> libc::c_int>,
    pub next: ::std::option::Option<extern "C" fn(config_parser:
                                                      *mut WT_CONFIG_PARSER,
                                                  key: *mut WT_CONFIG_ITEM,
                                                  value: *mut WT_CONFIG_ITEM)
                                        -> libc::c_int>,
    pub get: ::std::option::Option<extern "C" fn(config_parser:
                                                     *mut WT_CONFIG_PARSER,
                                                 key: *const libc::c_char,
                                                 value: *mut WT_CONFIG_ITEM)
                                       -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_config_parser {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_config_parser {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___wt_config_arg { }
pub type WT_CONFIG_ARG = Struct___wt_config_arg;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_collator {
    pub compare: ::std::option::Option<extern "C" fn(collator:
                                                         *mut WT_COLLATOR,
                                                     session: *mut WT_SESSION,
                                                     key1: *const WT_ITEM,
                                                     key2: *const WT_ITEM,
                                                     cmp: *mut libc::c_int)
                                           -> libc::c_int>,
    pub customize: ::std::option::Option<extern "C" fn(collator:
                                                           *mut WT_COLLATOR,
                                                       session:
                                                           *mut WT_SESSION,
                                                       uri:
                                                           *const libc::c_char,
                                                       appcfg:
                                                           *mut WT_CONFIG_ITEM,
                                                       customp:
                                                           *mut *mut WT_COLLATOR)
                                             -> libc::c_int>,
    pub terminate: ::std::option::Option<extern "C" fn(collator:
                                                           *mut WT_COLLATOR,
                                                       session:
                                                           *mut WT_SESSION)
                                             -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_collator {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_collator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_compressor {
    pub compress: ::std::option::Option<extern "C" fn(compressor:
                                                          *mut WT_COMPRESSOR,
                                                      session:
                                                          *mut WT_SESSION,
                                                      src: *mut uint8_t,
                                                      src_len: size_t,
                                                      dst: *mut uint8_t,
                                                      dst_len: size_t,
                                                      result_lenp:
                                                          *mut size_t,
                                                      compression_failed:
                                                          *mut libc::c_int)
                                            -> libc::c_int>,
    pub compress_raw: ::std::option::Option<extern "C" fn(compressor:
                                                              *mut WT_COMPRESSOR,
                                                          session:
                                                              *mut WT_SESSION,
                                                          page_max: size_t,
                                                          split_pct:
                                                              libc::c_int,
                                                          extra: size_t,
                                                          src: *mut uint8_t,
                                                          offsets:
                                                              *mut uint32_t,
                                                          slots: uint32_t,
                                                          dst: *mut uint8_t,
                                                          dst_len: size_t,
                                                          _final:
                                                              libc::c_int,
                                                          result_lenp:
                                                              *mut size_t,
                                                          result_slotsp:
                                                              *mut uint32_t)
                                                -> libc::c_int>,
    pub decompress: ::std::option::Option<extern "C" fn(compressor:
                                                            *mut WT_COMPRESSOR,
                                                        session:
                                                            *mut WT_SESSION,
                                                        src: *mut uint8_t,
                                                        src_len: size_t,
                                                        dst: *mut uint8_t,
                                                        dst_len: size_t,
                                                        result_lenp:
                                                            *mut size_t)
                                              -> libc::c_int>,
    pub pre_size: ::std::option::Option<extern "C" fn(compressor:
                                                          *mut WT_COMPRESSOR,
                                                      session:
                                                          *mut WT_SESSION,
                                                      src: *mut uint8_t,
                                                      src_len: size_t,
                                                      result_lenp:
                                                          *mut size_t)
                                            -> libc::c_int>,
    pub terminate: ::std::option::Option<extern "C" fn(compressor:
                                                           *mut WT_COMPRESSOR,
                                                       session:
                                                           *mut WT_SESSION)
                                             -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_compressor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_compressor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_data_source {
    pub create: ::std::option::Option<extern "C" fn(dsrc: *mut WT_DATA_SOURCE,
                                                    session: *mut WT_SESSION,
                                                    uri:
                                                        *const libc::c_char,
                                                    config:
                                                        *mut WT_CONFIG_ARG)
                                          -> libc::c_int>,
    pub compact: ::std::option::Option<extern "C" fn(dsrc:
                                                         *mut WT_DATA_SOURCE,
                                                     session: *mut WT_SESSION,
                                                     uri:
                                                         *const libc::c_char,
                                                     config:
                                                         *mut WT_CONFIG_ARG)
                                           -> libc::c_int>,
    pub drop: ::std::option::Option<extern "C" fn(dsrc: *mut WT_DATA_SOURCE,
                                                  session: *mut WT_SESSION,
                                                  uri: *const libc::c_char,
                                                  config: *mut WT_CONFIG_ARG)
                                        -> libc::c_int>,
    pub open_cursor: ::std::option::Option<extern "C" fn(dsrc:
                                                             *mut WT_DATA_SOURCE,
                                                         session:
                                                             *mut WT_SESSION,
                                                         uri:
                                                             *const libc::c_char,
                                                         config:
                                                             *mut WT_CONFIG_ARG,
                                                         new_cursor:
                                                             *mut *mut WT_CURSOR)
                                               -> libc::c_int>,
    pub rename: ::std::option::Option<extern "C" fn(dsrc: *mut WT_DATA_SOURCE,
                                                    session: *mut WT_SESSION,
                                                    uri:
                                                        *const libc::c_char,
                                                    newuri:
                                                        *const libc::c_char,
                                                    config:
                                                        *mut WT_CONFIG_ARG)
                                          -> libc::c_int>,
    pub salvage: ::std::option::Option<extern "C" fn(dsrc:
                                                         *mut WT_DATA_SOURCE,
                                                     session: *mut WT_SESSION,
                                                     uri:
                                                         *const libc::c_char,
                                                     config:
                                                         *mut WT_CONFIG_ARG)
                                           -> libc::c_int>,
    pub truncate: ::std::option::Option<extern "C" fn(dsrc:
                                                          *mut WT_DATA_SOURCE,
                                                      session:
                                                          *mut WT_SESSION,
                                                      uri:
                                                          *const libc::c_char,
                                                      config:
                                                          *mut WT_CONFIG_ARG)
                                            -> libc::c_int>,
    pub range_truncate: ::std::option::Option<extern "C" fn(dsrc:
                                                                *mut WT_DATA_SOURCE,
                                                            session:
                                                                *mut WT_SESSION,
                                                            start:
                                                                *mut WT_CURSOR,
                                                            stop:
                                                                *mut WT_CURSOR)
                                                  -> libc::c_int>,
    pub verify: ::std::option::Option<extern "C" fn(dsrc: *mut WT_DATA_SOURCE,
                                                    session: *mut WT_SESSION,
                                                    uri:
                                                        *const libc::c_char,
                                                    config:
                                                        *mut WT_CONFIG_ARG)
                                          -> libc::c_int>,
    pub checkpoint: ::std::option::Option<extern "C" fn(dsrc:
                                                            *mut WT_DATA_SOURCE,
                                                        session:
                                                            *mut WT_SESSION,
                                                        config:
                                                            *mut WT_CONFIG_ARG)
                                              -> libc::c_int>,
    pub terminate: ::std::option::Option<extern "C" fn(dsrc:
                                                           *mut WT_DATA_SOURCE,
                                                       session:
                                                           *mut WT_SESSION)
                                             -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_data_source {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_data_source {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___wt_extractor {
    pub extract: ::std::option::Option<extern "C" fn(extractor:
                                                         *mut WT_EXTRACTOR,
                                                     session: *mut WT_SESSION,
                                                     key: *const WT_ITEM,
                                                     value: *const WT_ITEM,
                                                     result_cursor:
                                                         *mut WT_CURSOR)
                                           -> libc::c_int>,
    pub customize: ::std::option::Option<extern "C" fn(extractor:
                                                           *mut WT_EXTRACTOR,
                                                       session:
                                                           *mut WT_SESSION,
                                                       uri:
                                                           *const libc::c_char,
                                                       appcfg:
                                                           *mut WT_CONFIG_ITEM,
                                                       customp:
                                                           *mut *mut WT_EXTRACTOR)
                                             -> libc::c_int>,
    pub terminate: ::std::option::Option<extern "C" fn(extractor:
                                                           *mut WT_EXTRACTOR,
                                                       session:
                                                           *mut WT_SESSION)
                                             -> libc::c_int>,
}
impl ::std::clone::Clone for Struct___wt_extractor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___wt_extractor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: libc::c_int;
    pub static mut sys_errlist: *const *const libc::c_char;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const libc::c_char,
                     __endptr: *mut *mut libc::c_char,
                     __base: libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const libc::c_char,
                     __endptr: *mut *mut libc::c_char,
                     __base: libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: libc::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t,
                     __base: libc::c_int) -> uintmax_t;
    pub fn renameat(arg1: libc::c_int, arg2: *const libc::c_char,
                    arg3: libc::c_int, arg4: *const libc::c_char)
     -> libc::c_int;
    pub fn clearerr(arg1: *mut FILE) -> ();
    pub fn fclose(arg1: *mut FILE) -> libc::c_int;
    pub fn feof(arg1: *mut FILE) -> libc::c_int;
    pub fn ferror(arg1: *mut FILE) -> libc::c_int;
    pub fn fflush(arg1: *mut FILE) -> libc::c_int;
    pub fn fgetc(arg1: *mut FILE) -> libc::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> libc::c_int;
    pub fn fgets(arg1: *mut libc::c_char, arg2: libc::c_int,
                 arg3: *mut FILE) -> *mut libc::c_char;
    pub fn fopen(arg1: *const libc::c_char, arg2: *const libc::c_char)
     -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const libc::c_char, ...)
     -> libc::c_int;
    pub fn fputc(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
    pub fn fputs(arg1: *const libc::c_char, arg2: *mut FILE)
     -> libc::c_int;
    pub fn fread(arg1: *mut libc::c_void, arg2: size_t, arg3: size_t,
                 arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const libc::c_char, arg2: *const libc::c_char,
                   arg3: *mut FILE) -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const libc::c_char, ...)
     -> libc::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: libc::c_long, arg3: libc::c_int)
     -> libc::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> libc::c_int;
    pub fn ftell(arg1: *mut FILE) -> libc::c_long;
    pub fn fwrite(arg1: *const libc::c_void, arg2: size_t, arg3: size_t,
                  arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> libc::c_int;
    pub fn getchar() -> libc::c_int;
    pub fn gets(arg1: *mut libc::c_char) -> *mut libc::c_char;
    pub fn perror(arg1: *const libc::c_char) -> ();
    pub fn printf(arg1: *const libc::c_char, ...) -> libc::c_int;
    pub fn putc(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
    pub fn putchar(arg1: libc::c_int) -> libc::c_int;
    pub fn puts(arg1: *const libc::c_char) -> libc::c_int;
    pub fn remove(arg1: *const libc::c_char) -> libc::c_int;
    pub fn rename(arg1: *const libc::c_char, arg2: *const libc::c_char)
     -> libc::c_int;
    pub fn rewind(arg1: *mut FILE) -> ();
    pub fn scanf(arg1: *const libc::c_char, ...) -> libc::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut libc::c_char) -> ();
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut libc::c_char,
                   arg3: libc::c_int, arg4: size_t) -> libc::c_int;
    pub fn sprintf(arg1: *mut libc::c_char,
                   arg2: *const libc::c_char, ...) -> libc::c_int;
    pub fn sscanf(arg1: *const libc::c_char,
                  arg2: *const libc::c_char, ...) -> libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut libc::c_char) -> *mut libc::c_char;
    pub fn ungetc(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const libc::c_char,
                    arg3: va_list) -> libc::c_int;
    pub fn vprintf(arg1: *const libc::c_char, arg2: va_list)
     -> libc::c_int;
    pub fn vsprintf(arg1: *mut libc::c_char, arg2: *const libc::c_char,
                    arg3: va_list) -> libc::c_int;
    pub fn ctermid(arg1: *mut libc::c_char) -> *mut libc::c_char;
    pub fn fdopen(arg1: libc::c_int, arg2: *const libc::c_char)
     -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> libc::c_int;
    pub fn pclose(arg1: *mut FILE) -> libc::c_int;
    pub fn popen(arg1: *const libc::c_char, arg2: *const libc::c_char)
     -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> libc::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const libc::c_char,
                      arg3: va_list) -> libc::c_int;
    pub fn __swbuf(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
    pub fn __sputc(_c: libc::c_int, _p: *mut FILE) -> libc::c_int;
    pub fn flockfile(arg1: *mut FILE) -> ();
    pub fn ftrylockfile(arg1: *mut FILE) -> libc::c_int;
    pub fn funlockfile(arg1: *mut FILE) -> ();
    pub fn getc_unlocked(arg1: *mut FILE) -> libc::c_int;
    pub fn getchar_unlocked() -> libc::c_int;
    pub fn putc_unlocked(arg1: libc::c_int, arg2: *mut FILE)
     -> libc::c_int;
    pub fn putchar_unlocked(arg1: libc::c_int) -> libc::c_int;
    pub fn getw(arg1: *mut FILE) -> libc::c_int;
    pub fn putw(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
    pub fn tempnam(arg1: *const libc::c_char, arg2: *const libc::c_char)
     -> *mut libc::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: libc::c_int)
     -> libc::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut libc::c_char, arg2: size_t,
                    arg3: *const libc::c_char, ...) -> libc::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const libc::c_char,
                   arg3: va_list) -> libc::c_int;
    pub fn vscanf(arg1: *const libc::c_char, arg2: va_list)
     -> libc::c_int;
    pub fn vsnprintf(arg1: *mut libc::c_char, arg2: size_t,
                     arg3: *const libc::c_char, arg4: va_list)
     -> libc::c_int;
    pub fn vsscanf(arg1: *const libc::c_char, arg2: *const libc::c_char,
                   arg3: va_list) -> libc::c_int;
    pub fn dprintf(arg1: libc::c_int, arg2: *const libc::c_char, ...)
     -> libc::c_int;
    pub fn vdprintf(arg1: libc::c_int, arg2: *const libc::c_char,
                    arg3: va_list) -> libc::c_int;
    pub fn getdelim(arg1: *mut *mut libc::c_char, arg2: *mut size_t,
                    arg3: libc::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut libc::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut libc::c_char,
                    arg2: *const libc::c_char, ...) -> libc::c_int;
    pub fn ctermid_r(arg1: *mut libc::c_char) -> *mut libc::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut libc::c_char;
    pub fn fmtcheck(arg1: *const libc::c_char, arg2: *const libc::c_char)
     -> *const libc::c_char;
    pub fn fpurge(arg1: *mut FILE) -> libc::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut libc::c_char,
                     arg3: libc::c_int) -> ();
    pub fn setlinebuf(arg1: *mut FILE) -> libc::c_int;
    pub fn vasprintf(arg1: *mut *mut libc::c_char,
                     arg2: *const libc::c_char, arg3: va_list)
     -> libc::c_int;
    pub fn zopen(arg1: *const libc::c_char, arg2: *const libc::c_char,
                 arg3: libc::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const libc::c_void,
                   arg2:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut libc::c_void,
                                                           arg2:
                                                               *mut libc::c_char,
                                                           arg3:
                                                               libc::c_int)
                                                 -> libc::c_int>,
                   arg3:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut libc::c_void,
                                                           arg2:
                                                               *const libc::c_char,
                                                           arg3:
                                                               libc::c_int)
                                                 -> libc::c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut libc::c_void,
                                                           arg2: fpos_t,
                                                           arg3:
                                                               libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut libc::c_void)
                                                 -> libc::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut libc::c_char, arg2: libc::c_int,
                         arg3: size_t, arg4: *const libc::c_char, ...)
     -> libc::c_int;
    pub fn __snprintf_chk(arg1: *mut libc::c_char, arg2: size_t,
                          arg3: libc::c_int, arg4: size_t,
                          arg5: *const libc::c_char, ...) -> libc::c_int;
    pub fn __vsprintf_chk(arg1: *mut libc::c_char, arg2: libc::c_int,
                          arg3: size_t, arg4: *const libc::c_char,
                          arg5: va_list) -> libc::c_int;
    pub fn __vsnprintf_chk(arg1: *mut libc::c_char, arg2: size_t,
                           arg3: libc::c_int, arg4: size_t,
                           arg5: *const libc::c_char, arg6: va_list)
     -> libc::c_int;
    pub fn wiredtiger_open(home: *const libc::c_char,
                           errhandler: *mut WT_EVENT_HANDLER,
                           config: *const libc::c_char,
                           connectionp: *mut *mut WT_CONNECTION)
     -> libc::c_int;
    pub fn wiredtiger_strerror(error: libc::c_int) -> *const libc::c_char;
    pub fn wiredtiger_struct_pack(session: *mut WT_SESSION,
                                  buffer: *mut libc::c_void, size: size_t,
                                  format: *const libc::c_char, ...)
     -> libc::c_int;
    pub fn wiredtiger_struct_size(session: *mut WT_SESSION,
                                  sizep: *mut size_t,
                                  format: *const libc::c_char, ...)
     -> libc::c_int;
    pub fn wiredtiger_struct_unpack(session: *mut WT_SESSION,
                                    buffer: *const libc::c_void,
                                    size: size_t,
                                    format: *const libc::c_char, ...)
     -> libc::c_int;
    pub fn wiredtiger_pack_start(session: *mut WT_SESSION,
                                 format: *const libc::c_char,
                                 buffer: *mut libc::c_void, size: size_t,
                                 psp: *mut *mut WT_PACK_STREAM)
     -> libc::c_int;
    pub fn wiredtiger_unpack_start(session: *mut WT_SESSION,
                                   format: *const libc::c_char,
                                   buffer: *const libc::c_void,
                                   size: size_t,
                                   psp: *mut *mut WT_PACK_STREAM)
     -> libc::c_int;
    pub fn wiredtiger_pack_close(ps: *mut WT_PACK_STREAM, usedp: *mut size_t)
     -> libc::c_int;
    pub fn wiredtiger_pack_item(ps: *mut WT_PACK_STREAM, item: *mut WT_ITEM)
     -> libc::c_int;
    pub fn wiredtiger_pack_int(ps: *mut WT_PACK_STREAM, i: int64_t)
     -> libc::c_int;
    pub fn wiredtiger_pack_str(ps: *mut WT_PACK_STREAM,
                               s: *const libc::c_char) -> libc::c_int;
    pub fn wiredtiger_pack_uint(ps: *mut WT_PACK_STREAM, u: uint64_t)
     -> libc::c_int;
    pub fn wiredtiger_unpack_item(ps: *mut WT_PACK_STREAM, item: *mut WT_ITEM)
     -> libc::c_int;
    pub fn wiredtiger_unpack_int(ps: *mut WT_PACK_STREAM, ip: *mut int64_t)
     -> libc::c_int;
    pub fn wiredtiger_unpack_str(ps: *mut WT_PACK_STREAM,
                                 sp: *mut *const libc::c_char)
     -> libc::c_int;
    pub fn wiredtiger_unpack_uint(ps: *mut WT_PACK_STREAM, up: *mut uint64_t)
     -> libc::c_int;
    pub fn wiredtiger_config_parser_open(session: *mut WT_SESSION,
                                         config: *const libc::c_char,
                                         len: size_t,
                                         config_parserp:
                                             *mut *mut WT_CONFIG_PARSER)
     -> libc::c_int;
    pub fn wiredtiger_version(majorp: *mut libc::c_int,
                              minorp: *mut libc::c_int,
                              patchp: *mut libc::c_int)
     -> *const libc::c_char;
    pub fn wiredtiger_extension_init(connection: *mut WT_CONNECTION,
                                     config: *mut WT_CONFIG_ARG)
     -> libc::c_int;
    pub fn wiredtiger_extension_terminate(connection: *mut WT_CONNECTION)
     -> libc::c_int;
}
